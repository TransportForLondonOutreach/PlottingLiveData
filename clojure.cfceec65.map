{"version":3,"sources":["node_modules\\monaco-editor\\esm\\vs\\basic-languages\\clojure\\clojure.js"],"names":["conf","comments","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","language","defaultToken","ignoreCase","tokenPostfix","token","keywords","constants","operators","tokenizer","root","cases","include","whitespace","strings","multiLineString"],"mappings":"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","file":"clojure.cfceec65.map","sourceRoot":"..","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    comments: {\n        lineComment: ';;',\n    },\n    brackets: [['(', ')'], ['{', '}'], ['[', ']']],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n    ],\n};\nexport var language = {\n    defaultToken: '',\n    ignoreCase: true,\n    tokenPostfix: '.clj',\n    brackets: [\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\n        { open: '{', close: '}', token: 'delimiter.curly' },\n        { open: '[', close: ']', token: 'delimiter.square' },\n    ],\n    keywords: [\n        'ns',\n        'ns-unmap',\n        'create-ns',\n        'in-ns',\n        'fn',\n        'def',\n        'defn',\n        'defmacro',\n        'defmulti',\n        'defonce',\n        'require',\n        'import',\n        'new',\n        'refer',\n        'pos',\n        'pos?',\n        'filter',\n        'map',\n        'reduce',\n        'repeat',\n        'key',\n        'rest',\n        'concat',\n        'into',\n        'reverse',\n        'iterate',\n        'range',\n        'drop',\n        'drop-while',\n        'take',\n        'take-while',\n        'neg',\n        'neg?',\n        'bound-fn',\n        'if',\n        'if-not',\n        'if-let',\n        'case,',\n        'contains',\n        'conj',\n        'disj',\n        'sort',\n        'get',\n        'assoc',\n        'merge',\n        'keys',\n        'vals',\n        'nth',\n        'first',\n        'last',\n        'count',\n        'contains?',\n        'cond',\n        'condp',\n        'cond->',\n        'cond->>',\n        'when',\n        'while',\n        'when-not',\n        'when-let',\n        'when-first',\n        'do',\n        'future',\n        'comment',\n        'doto',\n        'locking',\n        'proxy',\n        'println',\n        'type',\n        'meta',\n        'var',\n        'as->',\n        'reify',\n        'deftype',\n        'defrecord',\n        'defprotocol',\n        'extend',\n        'extend-protocol',\n        'extend-type',\n        'specify',\n        'specify!',\n        'try',\n        'catch',\n        'finally',\n        'let',\n        'letfn',\n        'binding',\n        'loop',\n        'for',\n        'seq',\n        'doseq',\n        'dotimes',\n        'when-let',\n        'if-let',\n        'when-some',\n        'if-some',\n        'this-as',\n        'defmethod',\n        'testing',\n        'deftest',\n        'are',\n        'use-fixtures',\n        'use',\n        'remove',\n        'run',\n        'run*',\n        'fresh',\n        'alt!',\n        'alt!!',\n        'go',\n        'go-loop',\n        'thread',\n        'boolean',\n        'str',\n    ],\n    constants: ['true', 'false', 'nil'],\n    operators: [\n        '=',\n        'not=',\n        '<',\n        '<=',\n        '>',\n        '>=',\n        'and',\n        'or',\n        'not',\n        'inc',\n        'dec',\n        'max',\n        'min',\n        'rem',\n        'bit-and',\n        'bit-or',\n        'bit-xor',\n        'bit-not',\n    ],\n    tokenizer: {\n        root: [\n            [/0[xX][0-9a-fA-F]+/, 'number.hex'],\n            [/[+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?/, 'number.float'],\n            [\n                /(?:\\b(?:(ns|def|defn|defn-|defmacro|defmulti|defonce|ns|ns-unmap|fn))(?![\\w-]))(\\s+)((?:\\w|\\-|\\!|\\?)*)/,\n                ['keyword', 'white', 'variable'],\n            ],\n            [\n                /[a-zA-Z_#][a-zA-Z0-9_\\-\\?\\!\\*]*/,\n                {\n                    cases: {\n                        '@keywords': 'keyword',\n                        '@constants': 'constant',\n                        '@operators': 'operators',\n                        '@default': 'identifier',\n                    },\n                },\n            ],\n            [/\\/#\"(?:\\.|(?:\\\")|[^\"\"\\n])*\"\\/g/, 'regexp'],\n            { include: '@whitespace' },\n            { include: '@strings' },\n        ],\n        whitespace: [[/[ \\t\\r\\n]+/, 'white'], [/;;.*$/, 'comment']],\n        strings: [\n            [/\"$/, 'string', '@popall'],\n            [/\"(?=.)/, 'string', '@multiLineString'],\n        ],\n        multiLineString: [\n            [/\\\\./, 'string.escape'],\n            [/\"/, 'string', '@popall'],\n            [/.(?=.*\")/, 'string'],\n            [/.*\\\\$/, 'string'],\n            [/.*$/, 'string', '@popall'],\n        ],\n    },\n};\n"]}
{"version":3,"sources":["node_modules\\monaco-editor\\esm\\vs\\basic-languages\\ruby\\ruby.js"],"names":["conf","open","close","language","token","next","include","switchTo"],"mappings":"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","file":"ruby.77ac2a38.map","sourceRoot":"..","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    comments: {\n        lineComment: '#',\n        blockComment: ['=begin', '=end'],\n    },\n    brackets: [\n        ['(', ')'],\n        ['{', '}'],\n        ['[', ']']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n    ]\n};\n/*\n * Ruby language definition\n *\n * Quite a complex language due to elaborate escape sequences\n * and quoting of literate strings/regular expressions, and\n * an 'end' keyword that does not always apply to modifiers like until and while,\n * and a 'do' keyword that sometimes starts a block, but sometimes is part of\n * another statement (like 'while').\n *\n * (1) end blocks:\n * 'end' may end declarations like if or until, but sometimes 'if' or 'until'\n * are modifiers where there is no 'end'. Also, 'do' sometimes starts a block\n * that is ended by 'end', but sometimes it is part of a 'while', 'for', or 'until'\n * To do proper brace matching we do some elaborate state manipulation.\n * some examples:\n *\n *   until bla do\n *     work until tired\n *     list.each do\n *       something if test\n *     end\n *   end\n *\n * or\n *\n * if test\n *  something (if test then x end)\n *  bar if bla\n * end\n *\n * or, how about using class as a property..\n *\n * class Test\n *   def endpoint\n *     self.class.endpoint || routes\n *   end\n * end\n *\n * (2) quoting:\n * there are many kinds of strings and escape sequences. But also, one can\n * start many string-like things as '%qx' where q specifies the kind of string\n * (like a command, escape expanded, regular expression, symbol etc.), and x is\n * some character and only another 'x' ends the sequence. Except for brackets\n * where the closing bracket ends the sequence.. and except for a nested bracket\n * inside the string like entity. Also, such strings can contain interpolated\n * ruby expressions again (and span multiple lines). Moreover, expanded\n * regular expression can also contain comments.\n */\nexport var language = {\n    tokenPostfix: '.ruby',\n    keywords: [\n        '__LINE__', '__ENCODING__', '__FILE__', 'BEGIN', 'END', 'alias', 'and', 'begin',\n        'break', 'case', 'class', 'def', 'defined?', 'do', 'else', 'elsif', 'end',\n        'ensure', 'for', 'false', 'if', 'in', 'module', 'next', 'nil', 'not', 'or', 'redo',\n        'rescue', 'retry', 'return', 'self', 'super', 'then', 'true', 'undef', 'unless',\n        'until', 'when', 'while', 'yield',\n    ],\n    keywordops: [\n        '::', '..', '...', '?', ':', '=>'\n    ],\n    builtins: [\n        'require', 'public', 'private', 'include', 'extend', 'attr_reader',\n        'protected', 'private_class_method', 'protected_class_method', 'new'\n    ],\n    // these are closed by 'end' (if, while and until are handled separately)\n    declarations: [\n        'module', 'class', 'def', 'case', 'do', 'begin', 'for', 'if', 'while', 'until', 'unless'\n    ],\n    linedecls: [\n        'def', 'case', 'do', 'begin', 'for', 'if', 'while', 'until', 'unless'\n    ],\n    operators: [\n        '^', '&', '|', '<=>', '==', '===', '!~', '=~', '>', '>=', '<', '<=', '<<', '>>', '+',\n        '-', '*', '/', '%', '**', '~', '+@', '-@', '[]', '[]=', '`',\n        '+=', '-=', '*=', '**=', '/=', '^=', '%=', '<<=', '>>=', '&=', '&&=', '||=', '|='\n    ],\n    brackets: [\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\n        { open: '{', close: '}', token: 'delimiter.curly' },\n        { open: '[', close: ']', token: 'delimiter.square' }\n    ],\n    // we include these common regular expressions\n    symbols: /[=><!~?:&|+\\-*\\/\\^%\\.]+/,\n    // escape sequences\n    escape: /(?:[abefnrstv\\\\\"'\\n\\r]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4})/,\n    escapes: /\\\\(?:C\\-(@escape|.)|c(@escape|.)|@escape)/,\n    decpart: /\\d(_?\\d)*/,\n    decimal: /0|@decpart/,\n    delim: /[^a-zA-Z0-9\\s\\n\\r]/,\n    heredelim: /(?:\\w+|'[^']*'|\"[^\"]*\"|`[^`]*`)/,\n    regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\n    regexpesc: /\\\\(?:[AzZbBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})?/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        // Main entry.\n        // root.<decl> where decl is the current opening declaration (like 'class')\n        root: [\n            // identifiers and keywords\n            // most complexity here is due to matching 'end' correctly with declarations.\n            // We distinguish a declaration that comes first on a line, versus declarations further on a line (which are most likey modifiers)\n            [/^(\\s*)([a-z_]\\w*[!?=]?)/, ['white',\n                    {\n                        cases: {\n                            'for|until|while': { token: 'keyword.$2', next: '@dodecl.$2' },\n                            '@declarations': { token: 'keyword.$2', next: '@root.$2' },\n                            'end': { token: 'keyword.$S2', next: '@pop' },\n                            '@keywords': 'keyword',\n                            '@builtins': 'predefined',\n                            '@default': 'identifier'\n                        }\n                    }]],\n            [/[a-z_]\\w*[!?=]?/,\n                {\n                    cases: {\n                        'if|unless|while|until': { token: 'keyword.$0x', next: '@modifier.$0x' },\n                        'for': { token: 'keyword.$2', next: '@dodecl.$2' },\n                        '@linedecls': { token: 'keyword.$0', next: '@root.$0' },\n                        'end': { token: 'keyword.$S2', next: '@pop' },\n                        '@keywords': 'keyword',\n                        '@builtins': 'predefined',\n                        '@default': 'identifier'\n                    }\n                }],\n            [/[A-Z][\\w]*[!?=]?/, 'constructor.identifier'],\n            [/\\$[\\w]*/, 'global.constant'],\n            [/@[\\w]*/, 'namespace.instance.identifier'],\n            [/@@[\\w]*/, 'namespace.class.identifier'],\n            // here document\n            [/<<[-~](@heredelim).*/, { token: 'string.heredoc.delimiter', next: '@heredoc.$1' }],\n            [/[ \\t\\r\\n]+<<(@heredelim).*/, { token: 'string.heredoc.delimiter', next: '@heredoc.$1' }],\n            [/^<<(@heredelim).*/, { token: 'string.heredoc.delimiter', next: '@heredoc.$1' }],\n            // whitespace\n            { include: '@whitespace' },\n            // strings\n            [/\"/, { token: 'string.d.delim', next: '@dstring.d.\"' }],\n            [/'/, { token: 'string.sq.delim', next: '@sstring.sq' }],\n            // % literals. For efficiency, rematch in the 'pstring' state\n            [/%([rsqxwW]|Q?)/, { token: '@rematch', next: 'pstring' }],\n            // commands and symbols\n            [/`/, { token: 'string.x.delim', next: '@dstring.x.`' }],\n            [/:(\\w|[$@])\\w*[!?=]?/, 'string.s'],\n            [/:\"/, { token: 'string.s.delim', next: '@dstring.s.\"' }],\n            [/:'/, { token: 'string.s.delim', next: '@sstring.s' }],\n            // regular expressions. Lookahead for a (not escaped) closing forwardslash on the same line\n            [/\\/(?=(\\\\\\/|[^\\/\\n])+\\/)/, { token: 'regexp.delim', next: '@regexp' }],\n            // delimiters and operators\n            [/[{}()\\[\\]]/, '@brackets'],\n            [/@symbols/, {\n                    cases: {\n                        '@keywordops': 'keyword',\n                        '@operators': 'operator',\n                        '@default': ''\n                    }\n                }],\n            [/[;,]/, 'delimiter'],\n            // numbers\n            [/0[xX][0-9a-fA-F](_?[0-9a-fA-F])*/, 'number.hex'],\n            [/0[_oO][0-7](_?[0-7])*/, 'number.octal'],\n            [/0[bB][01](_?[01])*/, 'number.binary'],\n            [/0[dD]@decpart/, 'number'],\n            [/@decimal((\\.@decpart)?([eE][\\-+]?@decpart)?)/, {\n                    cases: {\n                        '$1': 'number.float',\n                        '@default': 'number'\n                    }\n                }],\n        ],\n        // used to not treat a 'do' as a block opener if it occurs on the same\n        // line as a 'do' statement: 'while|until|for'\n        // dodecl.<decl> where decl is the declarations started, like 'while'\n        dodecl: [\n            [/^/, { token: '', switchTo: '@root.$S2' }],\n            [/[a-z_]\\w*[!?=]?/, {\n                    cases: {\n                        'end': { token: 'keyword.$S2', next: '@pop' },\n                        'do': { token: 'keyword', switchTo: '@root.$S2' },\n                        '@linedecls': { token: '@rematch', switchTo: '@root.$S2' },\n                        '@keywords': 'keyword',\n                        '@builtins': 'predefined',\n                        '@default': 'identifier'\n                    }\n                }],\n            { include: '@root' }\n        ],\n        // used to prevent potential modifiers ('if|until|while|unless') to match\n        // with 'end' keywords.\n        // modifier.<decl>x where decl is the declaration starter, like 'if'\n        modifier: [\n            [/^/, '', '@pop'],\n            [/[a-z_]\\w*[!?=]?/, {\n                    cases: {\n                        'end': { token: 'keyword.$S2', next: '@pop' },\n                        'then|else|elsif|do': { token: 'keyword', switchTo: '@root.$S2' },\n                        '@linedecls': { token: '@rematch', switchTo: '@root.$S2' },\n                        '@keywords': 'keyword',\n                        '@builtins': 'predefined',\n                        '@default': 'identifier'\n                    }\n                }],\n            { include: '@root' }\n        ],\n        // single quote strings (also used for symbols)\n        // sstring.<kind>  where kind is 'sq' (single quote) or 's' (symbol)\n        sstring: [\n            [/[^\\\\']+/, 'string.$S2'],\n            [/\\\\\\\\|\\\\'|\\\\$/, 'string.$S2.escape'],\n            [/\\\\./, 'string.$S2.invalid'],\n            [/'/, { token: 'string.$S2.delim', next: '@pop' }]\n        ],\n        // double quoted \"string\".\n        // dstring.<kind>.<delim> where kind is 'd' (double quoted), 'x' (command), or 's' (symbol)\n        // and delim is the ending delimiter (\" or `)\n        dstring: [\n            [/[^\\\\`\"#]+/, 'string.$S2'],\n            [/#/, 'string.$S2.escape', '@interpolated'],\n            [/\\\\$/, 'string.$S2.escape'],\n            [/@escapes/, 'string.$S2.escape'],\n            [/\\\\./, 'string.$S2.escape.invalid'],\n            [/[`\"]/, {\n                    cases: {\n                        '$#==$S3': { token: 'string.$S2.delim', next: '@pop' },\n                        '@default': 'string.$S2'\n                    }\n                }]\n        ],\n        // literal documents\n        // heredoc.<close> where close is the closing delimiter\n        heredoc: [\n            [/^(\\s*)(@heredelim)$/, {\n                    cases: {\n                        '$2==$S2': ['string.heredoc', { token: 'string.heredoc.delimiter', next: '@pop' }],\n                        '@default': ['string.heredoc', 'string.heredoc']\n                    }\n                }],\n            [/.*/, 'string.heredoc'],\n        ],\n        // interpolated sequence\n        interpolated: [\n            [/\\$\\w*/, 'global.constant', '@pop'],\n            [/@\\w*/, 'namespace.class.identifier', '@pop'],\n            [/@@\\w*/, 'namespace.instance.identifier', '@pop'],\n            [/[{]/, { token: 'string.escape.curly', switchTo: '@interpolated_compound' }],\n            ['', '', '@pop'],\n        ],\n        // any code\n        interpolated_compound: [\n            [/[}]/, { token: 'string.escape.curly', next: '@pop' }],\n            { include: '@root' },\n        ],\n        // %r quoted regexp\n        // pregexp.<open>.<close> where open/close are the open/close delimiter\n        pregexp: [\n            { include: '@whitespace' },\n            // turns out that you can quote using regex control characters, aargh!\n            // for example; %r|kgjgaj| is ok (even though | is used for alternation)\n            // so, we need to match those first\n            [/[^\\(\\{\\[\\\\]/, {\n                    cases: {\n                        '$#==$S3': { token: 'regexp.delim', next: '@pop' },\n                        '$#==$S2': { token: 'regexp.delim', next: '@push' },\n                        '~[)}\\\\]]': '@brackets.regexp.escape.control',\n                        '~@regexpctl': 'regexp.escape.control',\n                        '@default': 'regexp'\n                    }\n                }],\n            { include: '@regexcontrol' },\n        ],\n        // We match regular expression quite precisely\n        regexp: [\n            { include: '@regexcontrol' },\n            [/[^\\\\\\/]/, 'regexp'],\n            ['/[ixmp]*', { token: 'regexp.delim' }, '@pop'],\n        ],\n        regexcontrol: [\n            [/(\\{)(\\d+(?:,\\d*)?)(\\})/, ['@brackets.regexp.escape.control', 'regexp.escape.control', '@brackets.regexp.escape.control']],\n            [/(\\[)(\\^?)/, ['@brackets.regexp.escape.control', { token: 'regexp.escape.control', next: '@regexrange' }]],\n            [/(\\()(\\?[:=!])/, ['@brackets.regexp.escape.control', 'regexp.escape.control']],\n            [/\\(\\?#/, { token: 'regexp.escape.control', next: '@regexpcomment' }],\n            [/[()]/, '@brackets.regexp.escape.control'],\n            [/@regexpctl/, 'regexp.escape.control'],\n            [/\\\\$/, 'regexp.escape'],\n            [/@regexpesc/, 'regexp.escape'],\n            [/\\\\\\./, 'regexp.invalid'],\n            [/#/, 'regexp.escape', '@interpolated'],\n        ],\n        regexrange: [\n            [/-/, 'regexp.escape.control'],\n            [/\\^/, 'regexp.invalid'],\n            [/\\\\$/, 'regexp.escape'],\n            [/@regexpesc/, 'regexp.escape'],\n            [/[^\\]]/, 'regexp'],\n            [/\\]/, '@brackets.regexp.escape.control', '@pop'],\n        ],\n        regexpcomment: [\n            [/[^)]+/, 'comment'],\n            [/\\)/, { token: 'regexp.escape.control', next: '@pop' }]\n        ],\n        // % quoted strings\n        // A bit repetitive since we need to often special case the kind of ending delimiter\n        pstring: [\n            [/%([qws])\\(/, { token: 'string.$1.delim', switchTo: '@qstring.$1.(.)' }],\n            [/%([qws])\\[/, { token: 'string.$1.delim', switchTo: '@qstring.$1.[.]' }],\n            [/%([qws])\\{/, { token: 'string.$1.delim', switchTo: '@qstring.$1.{.}' }],\n            [/%([qws])</, { token: 'string.$1.delim', switchTo: '@qstring.$1.<.>' }],\n            [/%([qws])(@delim)/, { token: 'string.$1.delim', switchTo: '@qstring.$1.$2.$2' }],\n            [/%r\\(/, { token: 'regexp.delim', switchTo: '@pregexp.(.)' }],\n            [/%r\\[/, { token: 'regexp.delim', switchTo: '@pregexp.[.]' }],\n            [/%r\\{/, { token: 'regexp.delim', switchTo: '@pregexp.{.}' }],\n            [/%r</, { token: 'regexp.delim', switchTo: '@pregexp.<.>' }],\n            [/%r(@delim)/, { token: 'regexp.delim', switchTo: '@pregexp.$1.$1' }],\n            [/%(x|W|Q?)\\(/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.(.)' }],\n            [/%(x|W|Q?)\\[/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.[.]' }],\n            [/%(x|W|Q?)\\{/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.{.}' }],\n            [/%(x|W|Q?)</, { token: 'string.$1.delim', switchTo: '@qqstring.$1.<.>' }],\n            [/%(x|W|Q?)(@delim)/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.$2.$2' }],\n            [/%([rqwsxW]|Q?)./, { token: 'invalid', next: '@pop' }],\n            [/./, { token: 'invalid', next: '@pop' }],\n        ],\n        // non-expanded quoted string.\n        // qstring.<kind>.<open>.<close>\n        //  kind = q|w|s  (single quote, array, symbol)\n        //  open = open delimiter\n        //  close = close delimiter\n        qstring: [\n            [/\\\\$/, 'string.$S2.escape'],\n            [/\\\\./, 'string.$S2.escape'],\n            [/./, {\n                    cases: {\n                        '$#==$S4': { token: 'string.$S2.delim', next: '@pop' },\n                        '$#==$S3': { token: 'string.$S2.delim', next: '@push' },\n                        '@default': 'string.$S2'\n                    }\n                }],\n        ],\n        // expanded quoted string.\n        // qqstring.<kind>.<open>.<close>\n        //  kind = Q|W|x  (double quote, array, command)\n        //  open = open delimiter\n        //  close = close delimiter\n        qqstring: [\n            [/#/, 'string.$S2.escape', '@interpolated'],\n            { include: '@qstring' }\n        ],\n        // whitespace & comments\n        whitespace: [\n            [/[ \\t\\r\\n]+/, ''],\n            [/^\\s*=begin\\b/, 'comment', '@comment'],\n            [/#.*$/, 'comment'],\n        ],\n        comment: [\n            [/[^=]+/, 'comment'],\n            [/^\\s*=begin\\b/, 'comment.invalid'],\n            [/^\\s*=end\\b.*/, 'comment', '@pop'],\n            [/[=]/, 'comment']\n        ],\n    }\n};\n"]}
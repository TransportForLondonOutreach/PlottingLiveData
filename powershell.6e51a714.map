{"version":3,"sources":["node_modules\\monaco-editor\\esm\\vs\\basic-languages\\powershell\\powershell.js"],"names":["conf","open","close","notIn","RegExp","language","token","next"],"mappings":";AAIA,aAkCO,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAjCA,IAAIA,EAAO,QAAA,KAAA,CAED,YAAA,oFACH,SAAA,CACO,YAAA,IACC,aAAA,CAAC,KAAM,OAEf,SAAA,CACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,MAEQ,iBAAA,CACd,CAAEC,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,WACjC,CAAEF,KAAM,IAAMC,MAAO,IAAMC,MAAO,CAAC,SAAU,aAE/B,iBAAA,CACd,CAAEF,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAMC,MAAO,MAEhB,QAAA,CACI,QAAA,CACE,MAAA,IAAIE,OAAO,mBACb,IAAA,IAAIA,OAAO,yBAIjBC,EAAW,QAAA,SAAA,CACJ,aAAA,GACF,YAAA,EACE,aAAA,OACJ,SAAA,CACN,CAAEC,MAAO,kBAAmBL,KAAM,IAAKC,MAAO,KAC9C,CAAEI,MAAO,mBAAoBL,KAAM,IAAKC,MAAO,KAC/C,CAAEI,MAAO,wBAAyBL,KAAM,IAAKC,MAAO,MAE9C,SAAA,CACN,QAAS,QAAS,QAAS,QAAS,WAAY,OAChD,SAAU,KAAM,eAAgB,OAAQ,SAAU,MAClD,OAAQ,SAAU,UAAW,MAAO,UAAW,OAC/C,WAAY,KAAM,KAAM,QAAS,UAAW,SAC5C,SAAU,QAAS,OAAQ,MAAO,QAAS,QAC3C,MAAO,QAAS,WAAY,WAAY,WAAY,eAAgB,iBAE1D,aAAA,0KAEL,QAAA,2BACA,QAAA,wEAEE,UAAA,CACD,KAAA,CAED,CAAA,kBAAmB,CACL,MAAA,CACU,YAAA,CAAEI,MAAO,cACV,WAAA,MAIvB,CAAA,aAAc,IAEd,CAAA,QAAS,WAET,CAAA,oGAAqG,YAErG,CAAA,KAAM,UAAW,YAClB,CAAC,OAAQ,WAER,CAAA,aAAc,aACf,CAAC,WAAY,aAEZ,CAAA,2BAA4B,gBAC7B,CAAC,gCAAiC,cAClC,CAAC,OAAQ,UAER,CAAA,QAAS,aAET,CAAA,MAAO,SAAU,iBAClB,CAAC,MAAO,SAAU,iBAClB,CAAC,IAAK,CACS,MAAA,CACK,OAAA,SACI,WAAA,CAAEA,MAAO,SAAUC,KAAM,gBAGjD,CAAC,IAAK,CACS,MAAA,CACK,OAAA,SACI,WAAA,CAAED,MAAO,SAAUC,KAAM,iBAI7C,OAAA,CACJ,CAAC,YAAa,CACC,MAAA,CACK,OAAA,CAAED,MAAO,SAAUC,KAAM,WACrB,WAAA,YAGxB,CAAC,WAAY,CACE,MAAA,CACK,OAAA,CAAED,MAAO,gBAAiBC,KAAM,WAC5B,WAAA,mBAGxB,CAAC,KAAM,CACQ,MAAA,CACK,OAAA,CAAED,MAAO,wBAAyBC,KAAM,WACpC,WAAA,2BAGxB,CAAC,WAAY,CACE,MAAA,CACO,SAAA,CAAED,MAAO,WAAYC,KAAM,WACzB,WAAA,CAAED,MAAO,SAAUC,KAAM,cAGjD,CAAC,UAAW,CACG,MAAA,CACO,SAAA,WACE,WAAA,YAGxB,CAAC,OAAQ,CACM,MAAA,CACQ,UAAA,CAAED,MAAO,SAAUC,KAAM,QACxB,WAAA,CACD,MAAA,CACK,OAAA,CAAED,MAAO,SAAUC,KAAM,WACrB,WAAA,eAMxB,WAAA,CACR,CAAC,cAAe,CACD,MAAA,CACQ,UAAA,CAAED,MAAO,SAAUC,KAAM,QACxB,WAAA,YAGxB,CAAC,UAAW,UACZ,CAAC,WAAY,iBACb,CAAC,KAAM,yBACP,CAAC,UAAW,CACG,MAAA,CACO,SAAA,WACE,WAAA,aAInB,QAAA,CACL,CAAC,UAAW,WACZ,CAAC,KAAM,UAAW,QAClB,CAAC,4BAA6B,CAAED,MAAO,uBACvC,CAAC,QAAS","file":"powershell.6e51a714.map","sourceRoot":"..","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    // the default separators except `$-`\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#%\\^\\&\\*\\(\\)\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n    comments: {\n        lineComment: '#',\n        blockComment: ['<#', '#>'],\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"', notIn: ['string'] },\n        { open: '\\'', close: '\\'', notIn: ['string', 'comment'] },\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n    ],\n    folding: {\n        markers: {\n            start: new RegExp(\"^\\\\s*#region\\\\b\"),\n            end: new RegExp(\"^\\\\s*#endregion\\\\b\")\n        }\n    }\n};\nexport var language = {\n    defaultToken: '',\n    ignoreCase: true,\n    tokenPostfix: '.ps1',\n    brackets: [\n        { token: 'delimiter.curly', open: '{', close: '}' },\n        { token: 'delimiter.square', open: '[', close: ']' },\n        { token: 'delimiter.parenthesis', open: '(', close: ')' }\n    ],\n    keywords: [\n        'begin', 'break', 'catch', 'class', 'continue', 'data',\n        'define', 'do', 'dynamicparam', 'else', 'elseif', 'end',\n        'exit', 'filter', 'finally', 'for', 'foreach', 'from',\n        'function', 'if', 'in', 'param', 'process', 'return',\n        'switch', 'throw', 'trap', 'try', 'until', 'using',\n        'var', 'while', 'workflow', 'parallel', 'sequence', 'inlinescript', 'configuration'\n    ],\n    helpKeywords: /SYNOPSIS|DESCRIPTION|PARAMETER|EXAMPLE|INPUTS|OUTPUTS|NOTES|LINK|COMPONENT|ROLE|FUNCTIONALITY|FORWARDHELPTARGETNAME|FORWARDHELPCATEGORY|REMOTEHELPRUNSPACE|EXTERNALHELP/,\n    // we include these common regular expressions\n    symbols: /[=><!~?&%|+\\-*\\/\\^;\\.,]+/,\n    escapes: /`(?:[abfnrtv\\\\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // commands and keywords\n            [/[a-zA-Z_][\\w-]*/, {\n                    cases: {\n                        '@keywords': { token: 'keyword.$0' },\n                        '@default': ''\n                    }\n                }],\n            // whitespace\n            [/[ \\t\\r\\n]+/, ''],\n            // labels\n            [/^:\\w*/, 'metatag'],\n            // variables\n            [/\\$(\\{((global|local|private|script|using):)?[\\w]+\\}|((global|local|private|script|using):)?[\\w]+)/, 'variable'],\n            // Comments\n            [/<#/, 'comment', '@comment'],\n            [/#.*$/, 'comment'],\n            // delimiters\n            [/[{}()\\[\\]]/, '@brackets'],\n            [/@symbols/, 'delimiter'],\n            // numbers\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n            [/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'number.hex'],\n            [/\\d+?/, 'number'],\n            // delimiter: after number because of .\\d floats\n            [/[;,.]/, 'delimiter'],\n            // strings:\n            [/\\@\"/, 'string', '@herestring.\"'],\n            [/\\@'/, 'string', '@herestring.\\''],\n            [/\"/, {\n                    cases: {\n                        '@eos': 'string',\n                        '@default': { token: 'string', next: '@string.\"' }\n                    }\n                }],\n            [/'/, {\n                    cases: {\n                        '@eos': 'string',\n                        '@default': { token: 'string', next: '@string.\\'' }\n                    }\n                }],\n        ],\n        string: [\n            [/[^\"'\\$`]+/, {\n                    cases: {\n                        '@eos': { token: 'string', next: '@popall' },\n                        '@default': 'string'\n                    }\n                }],\n            [/@escapes/, {\n                    cases: {\n                        '@eos': { token: 'string.escape', next: '@popall' },\n                        '@default': 'string.escape'\n                    }\n                }],\n            [/`./, {\n                    cases: {\n                        '@eos': { token: 'string.escape.invalid', next: '@popall' },\n                        '@default': 'string.escape.invalid'\n                    }\n                }],\n            [/\\$[\\w]+$/, {\n                    cases: {\n                        '$S2==\"': { token: 'variable', next: '@popall' },\n                        '@default': { token: 'string', next: '@popall' }\n                    }\n                }],\n            [/\\$[\\w]+/, {\n                    cases: {\n                        '$S2==\"': 'variable',\n                        '@default': 'string'\n                    }\n                }],\n            [/[\"']/, {\n                    cases: {\n                        '$#==$S2': { token: 'string', next: '@pop' },\n                        '@default': {\n                            cases: {\n                                '@eos': { token: 'string', next: '@popall' },\n                                '@default': 'string'\n                            }\n                        }\n                    }\n                }],\n        ],\n        herestring: [\n            [/^\\s*([\"'])@/, {\n                    cases: {\n                        '$1==$S2': { token: 'string', next: '@pop' },\n                        '@default': 'string'\n                    }\n                }],\n            [/[^\\$`]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/`./, 'string.escape.invalid'],\n            [/\\$[\\w]+/, {\n                    cases: {\n                        '$S2==\"': 'variable',\n                        '@default': 'string'\n                    }\n                }],\n        ],\n        comment: [\n            [/[^#\\.]+/, 'comment'],\n            [/#>/, 'comment', '@pop'],\n            [/(\\.)(@helpKeywords)(?!\\w)/, { token: 'comment.keyword.$2' }],\n            [/[\\.#]/, 'comment']\n        ],\n    },\n};\n"]}